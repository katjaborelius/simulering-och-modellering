#!/bin/python3
# Python simulation of a simple planar pendulum with real time animation
# BH, OF, MP, AJ, TS 2020-10-20, latest version 2022-10-25.
from matplotlib import animation
from matplotlib.animation import FuncAnimation
from pylab import *
import numpy as np

"""
This script defines all the classes needed to simulate (and animate) a single
pendulum.
Hierarchy (somehow in order of encapsulation):
- Oscillator: a struct that stores the parameters of an oscillator (harmonic or
pendulum)
- Observable: a struct that stores the oscillator's coordinates and energy
values over time
- BaseSystem: harmonic oscillators and pendolums are distinguished only by the
expression of
the return force. This base class defines a virtual force
method, which is
specified by its child classes
-> Harmonic: specifies the return force as -k*t (i.e. spring)
-> Pendulum: specifies the return force as -k*sin(t)
- BaseIntegrator: parent class for all time-marching schemes; function
integrate performs
a numerical integration steps and updates the quantity of the
system provided
as input; function timestep wraps the numerical scheme itself
and it's not
directly implemented by BaseIntegrator, you need to implement
it in his child
classes (names are self-explanatory)
-> EulerCromerIntegrator: ...
-> VerletIntegrator: ...
-> RK4Integrator: ...
- Simulation: this last class encapsulates the whole simulation procedure;
functions are
self-explanatory; you can decide whether to just run the
simulation or to
run while also producing an animation: the latter option is
slower
"""
# Global constants
G = 9.8  # gravitational acceleration


class Oscillator:
    " Class for a general, simple oscillator "

    def __init__(self, m=1, c=4, t0=0, theta0=0, dtheta0=0, gamma=1):
        self.m = m  # mass of the pendulum bob
        self.c = c  # c = g/L
        self.L = G / c  # string length
        self.t = t0  # the time
        self.theta = theta0  # the position/angle
        self.dtheta = dtheta0  # the velocity
        self.gamma = gamma  # damping
        self.prev_theta = theta0  # for Verlet integration


class Observables:
    " Class for storing observables for an oscillator "

    def __init__(self):
        self.time = []  # list to store time
        self.pos = []  # list to store positions
        self.vel = []  # list to store velocities
        self.energy = []  # list to store energy


class BaseSystem:
    def force(self, osc):
        " Virtual method: implemented by the childc lasses "

    pass


class Harmonic(BaseSystem):
    def force(self, osc):
        return - osc.m * (osc.c * osc.theta + osc.gamma * osc.dtheta)


class Pendulum(BaseSystem):
    """Pendulum system with damping force."""
    def force(self, osc):
        return - osc.m * (osc.c * np.sin(osc.theta) + osc.gamma * osc.dtheta)


class BaseIntegrator:
    def __init__(self, _dt=0.01):
        self.dt = _dt  # time step

    def integrate(self, simsystem, osc, obs):
        """ Perform a single integration step """
        self.timestep(simsystem, osc, obs)
        # Append observables to their lists
        obs.time.append(osc.t)
        obs.pos.append(osc.theta)
        obs.vel.append(osc.dtheta)
        # Function 'isinstance' is used to check if the instance of the system
        object == 'Harmonic' or 'Pendulum'
        if isinstance(simsystem, Harmonic):
            # Harmonic oscillator energy
            obs.energy.append(0.5 * osc.m * osc.L ** 2 * osc.dtheta ** 2 + 0.5 * osc.m * G * osc.L * osc.theta ** 2)
        else:
            # Pendulum energy calculation (includes potential energy)
            obs.energy.append(0.5 * osc.m * osc.L ** 2 * osc.dtheta ** 2 + osc.m * G * osc.L * (1 - np.cos(osc.theta)))

    def timestep(self, simsystem, osc, obs):
        """ Virtual method: implemented by the child classes """
        pass
        # HERE YOU ARE ASKED TO IMPLEMENT THE NUMERICAL TIME-MARCHING SCHEMES:


class EulerCromerIntegrator(BaseIntegrator):
    def timestep(self, simsystem, osc, obs):
        # Calculate acceleration based on the force
        accel = simsystem.force(osc) / osc.m

        # Update velocity (angular velocity)
        osc.dtheta += accel * self.dt

        # Update position (angle)
        osc.theta += osc.dtheta * self.dt

        # Update time
        osc.t += self.dt

class VerletIntegrator(BaseIntegrator):
    def timestep(self, simsystem, osc, obs):
        # Compute acceleration
        accel = simsystem.force(osc) / osc.m

        # Update position using Verlet method
        theta_new = osc.theta + osc.dtheta * self.dt + 0.5 * accel * self.dt ** 2

        # Update velocity (approximate average velocity)
        new_accel = simsystem.force(Oscillator(m=osc.m, c=osc.c, theta0=theta_new, dtheta0=osc.dtheta, gamma=osc.gamma)) / osc.m
        osc.dtheta += 0.5 * (accel + new_accel) * self.dt
        osc.theta = theta_new
        osc.t += self.dt



class RK4Integrator(BaseIntegrator):
    def timestep(self, simsystem, osc, obs):
        # Store initial values for reset purposes
        theta_init = osc.theta
        dtheta_init = osc.dtheta

        # k1
        k1_theta = self.dt * dtheta_init
        k1_dtheta = self.dt * (simsystem.force(osc) / osc.m)

        # k2
        osc.theta = theta_init + 0.5 * k1_theta
        osc.dtheta = dtheta_init + 0.5 * k1_dtheta
        k2_theta = self.dt * osc.dtheta
        k2_dtheta = self.dt * (simsystem.force(osc) / osc.m)

        # Reset to initial values before next step
        osc.theta = theta_init
        osc.dtheta = dtheta_init

        # k3
        osc.theta = theta_init + 0.5 * k2_theta
        osc.dtheta = dtheta_init + 0.5 * k2_dtheta
        k3_theta = self.dt * osc.dtheta
        k3_dtheta = self.dt * (simsystem.force(osc) / osc.m)

        # Reset to initial values before next step
        osc.theta = theta_init
        osc.dtheta = dtheta_init

        # k4
        osc.theta = theta_init + k3_theta
        osc.dtheta = dtheta_init + k3_dtheta
        k4_theta = self.dt * osc.dtheta
        k4_dtheta = self.dt * (simsystem.force(osc) / osc.m)

        # Final update for theta and dtheta
        osc.theta = theta_init + (k1_theta + 2 * k2_theta + 2 * k3_theta + k4_theta) / 6
        osc.dtheta = dtheta_init + (k1_dtheta + 2 * k2_dtheta + 2 * k3_dtheta + k4_dtheta) / 6

        # Update time
        osc.t += self.dt

    def animate(framenr, simsystem, oscillator, obs, integrator, pendulum_line, stepsperframe):
        for it in range(stepsperframe):
            integrator.integrate(simsystem, oscillator, obs)
            x = np.array([0, np.sin(oscillator.theta)])
            y = np.array([0, -np.cos(oscillator.theta)])
            pendulum_line.set_data(x, y)
            return pendulum_line,


class Simulation:

    def reset(self, osc=Oscillator()):
        self.oscillator = osc
        self.obs = Observables()

    def __init__(self, osc=Oscillator()):
        self.reset(osc)
        # Run without displaying any animation (fast)

    def clear_observables(self):
        """Reset observables for a fresh simulation run."""
        self.obs = Observables()

    def run(self, simsystem, integrator, tmax=30):
        n = int(tmax / integrator.dt)
        for it in range(n):
            integrator.integrate(simsystem, self.oscillator, self.obs)
            # Run while displaying the animation of a pendulum swinging back and forth(slow - ish)
            # If too slow, try to increase stepsperframe

    def run_animate(self, simsystem, integrator, tmax=30., stepsperframe=1, title="Pendulum Animation"):
        """Run the simulation with real-time animation."""

        # Number of frames in the animation
        numframes = int(tmax / (stepsperframe * integrator.dt)) - 2

        # Clear and set up the plot
        plt.clf()
        fig, ax = plt.subplots()
        ax.set_xlim(-1.2, 1.2)
        ax.set_ylim(-1.2, 1.2)
        plt.axhline(y=0, color="k", lw=0.5)  # Horizontal line at y=0
        plt.axvline(x=0, color="k", lw=0.5)  # Vertical line at x=0
        pendulum_line, = ax.plot([], [], lw=5)

        # Animation title
        plt.title(title)

        # Define the animate function that updates the pendulum position
        def animate(framenr):
            for _ in range(stepsperframe):
                integrator.integrate(simsystem, self.oscillator, self.obs)
            x = np.array([0, np.sin(self.oscillator.theta)])  # Pendulum x-coordinates
            y = np.array([0, -np.cos(self.oscillator.theta)])  # Pendulum y-coordinates
            pendulum_line.set_data(x, y)
            return pendulum_line,

        # Create the animation object
        anim = FuncAnimation(fig, animate, frames=numframes, interval=25, blit=True, repeat=False)

        # Display the animation
        plt.show()

    def plot_observables(self, title="simulation", ref_E=None):
        plt.clf()
        plt.title(title)
        plt.plot(self.obs.time, self.obs.pos, 'b-', label="Position")
        plt.plot(self.obs.time, self.obs.vel, 'r-', label="Velocity")
        plt.plot(self.obs.time, self.obs.energy, 'g-', label="Energy")
        if ref_E != None:
            plt.plot([self.obs.time[0], self.obs.time[-1]], [ref_E, ref_E], 'k--',label="Ref.")
        plt.xlabel('time')
        plt.ylabel('observables')
        plt.legend()
        plt.savefig(title + ".pdf")
        plt.show()
            # It's good practice to encapsulate the script execution in
            # a function (e.g. for profiling reasons)

def exercise_11():
    # Parameters
    m = 1  # mass in kg
    g = 9.8  # gravitational acceleration in m/s^2
    L = g / 4  # calculated from sqrt(g/L) = 2

    # Initial conditions (used for both pendulum and harmonic oscillator)
    theta0 = 0.1 * np.pi  # initial angle for theta0/pi = 0.1
    dtheta0 = 0  # initial angular velocity
    gamma = 0  # no damping

    # Create oscillator instances with theta0 = 0.1 * np.pi for all integrators
    oscillator1 = Oscillator(m=m, c=g / L, theta0=theta0, dtheta0=dtheta0, gamma=gamma)
    oscillator2 = Oscillator(m=m, c=g / L, theta0=theta0, dtheta0=dtheta0, gamma=gamma)

    # Create instances for the systems
    pendulum_system = Pendulum()
    harmonic_system = Harmonic()

    # Create integrator instances
    euler_cromer = EulerCromerIntegrator(_dt=0.01)
    verlet = VerletIntegrator(_dt=0.01)
    rk4 = RK4Integrator(_dt=0.01)

    # Run Euler-Cromer for Pendulum
    sim_pendulum_euler = Simulation(oscillator1)
    sim_pendulum_euler.run(pendulum_system, euler_cromer, tmax=30)
    sim_pendulum_euler.plot_observables("Pendulum - Euler-Cromer")

    # Run Verlet for Pendulum with proper `prev_theta` initialization
    oscillator1.prev_theta = oscillator1.theta - oscillator1.dtheta * verlet.dt
    sim_pendulum_verlet = Simulation(oscillator1)
    sim_pendulum_verlet.run(pendulum_system, verlet, tmax=30)
    sim_pendulum_verlet.plot_observables("Pendulum - Verlet")

    # Run RK4 for Pendulum
    sim_pendulum_rk4 = Simulation(oscillator1)
    sim_pendulum_rk4.run(pendulum_system, rk4, tmax=30)
    sim_pendulum_rk4.plot_observables("Pendulum - RK4")

    # Run Euler-Cromer for Harmonic Oscillator
    sim_harmonic_euler = Simulation(oscillator2)
    sim_harmonic_euler.run(harmonic_system, euler_cromer, tmax=30)
    sim_harmonic_euler.plot_observables("Harmonic - Euler-Cromer")

    # Run Verlet for Harmonic Oscillator with proper `prev_theta` initialization
    oscillator2.prev_theta = oscillator2.theta - oscillator2.dtheta * verlet.dt
    sim_harmonic_verlet = Simulation(oscillator2)
    sim_harmonic_verlet.run(harmonic_system, verlet, tmax=30)
    sim_harmonic_verlet.plot_observables("Harmonic - Verlet")

    # Run RK4 for Harmonic Oscillator
    sim_harmonic_rk4 = Simulation(oscillator2)
    sim_harmonic_rk4.run(harmonic_system, rk4, tmax=30)
    sim_harmonic_rk4.plot_observables("Harmonic - RK4")

    # Loop over time steps and initial conditions for further testing with Pendulum
    time_steps = [0.01, 0.05, 0.1, 0.2]
    initial_conditions = [(theta0, dtheta0), (theta0, dtheta0)]  # All with theta0 = 0.1 * pi

    for dt in time_steps:
        for theta_init, dtheta_init in initial_conditions:
            oscillator = Oscillator(m=m, c=g / L, theta0=theta_init, dtheta0=dtheta_init, gamma=gamma)

            # Euler-Cromer for Pendulum
            euler_cromer = EulerCromerIntegrator(_dt=dt)
            sim_euler = Simulation(oscillator)
            sim_euler.run(pendulum_system, euler_cromer, tmax=30)
            title = f"Pendulum - Euler-Cromer (dt={dt}, theta0/pi={theta_init / np.pi})"
            sim_euler.plot_observables(title)
            sim_euler.clear_observables()

            # Verlet for Pendulum
            verlet = VerletIntegrator(_dt=dt)
            oscillator.prev_theta = oscillator.theta - oscillator.dtheta * dt  # Ensure proper initialization
            sim_verlet = Simulation(oscillator)
            sim_verlet.run(pendulum_system, verlet, tmax=30)
            title = f"Pendulum - Verlet (dt={dt}, theta0/pi={theta_init / np.pi})"
            sim_verlet.plot_observables(title)
            sim_verlet.clear_observables()

            # RK4 for Pendulum
            rk4 = RK4Integrator(_dt=dt)
            sim_rk4 = Simulation(oscillator)
            sim_rk4.run(pendulum_system, rk4, tmax=30)
            title = f"Pendulum - RK4 (dt={dt}, theta0/pi={theta_init / np.pi})"
            sim_rk4.plot_observables(title)
            sim_rk4.clear_observables()



def measure_period(theta0, simsystem, integrator, t_max=20):
    """ Simulate the pendulum and measure the period for a given initial angle theta0 """
    osc = Oscillator(m=1, c=4, theta0=theta0, dtheta0=0)
    simulation = Simulation(osc)

    # Run the simulation
    simulation.run(simsystem, integrator, tmax=t_max)

    # Find the period by detecting when the pendulum returns to the initial angle
    positions = np.array(simulation.obs.pos)
    times = np.array(simulation.obs.time)

    # Detect crossing points (where the pendulum reverses direction)
    crossing_points = np.where(np.diff(np.sign(positions)))[0]

    # Estimate period from the first complete oscillation
    if len(crossing_points) > 1:
        period = 2 * (times[crossing_points[1]] - times[crossing_points[0]])
        return period
    else:
        return None  # Not enough data to measure a period


def period_pendulum(theta_0):
    base_period = 2 * np.pi * 1 / 2
    correction = 1 + (1 / 16) * theta_0 ** 2 + (11 / 3072) * theta_0 ** 4 + (173 / 737280) * theta_0 ** 6
    return base_period * correction


def exercise_12():
    simsystem = Pendulum()
    integrator = VerletIntegrator(_dt=0.01)

    # Initial angles to test
    initial_angles = np.linspace(0.1, np.pi / 2, 10)  # from 0.1 to 90 degrees in radians
    periods = []

    for theta0 in initial_angles:
        period = measure_period(theta0, simsystem, integrator)
        if period:
            periods.append(period)
            print(f"Theta0: {theta0:.2f} rad, Period: {period:.2f} s")
        else:
            print(f"Theta0: {theta0:.2f} rad - No period found")

    compare = period_pendulum(initial_angles)

    # Plot Period vs Initial Angle
    plt.plot(initial_angles, periods, 'o-')
    plt.plot(initial_angles, compare, '-')
    plt.xlabel(r'Initial Angle $\theta_0$ (radians)')
    plt.ylabel('Period T (seconds)')
    plt.title('Pendulum T vs Initial Position')
    plt.legend(["from simulation", "perturbation series"])
    plt.show()


def exercise_14():
    # Parameters as specified in the assignment
    m = 1  # mass
    gamma = 1  # damping coefficient
    g = 9.8  # gravitational acceleration
    L = g / 4  # g/L = 4, which gives sqrt(g/L) = 2
    c = g / L
    theta0 = np.pi / 2  # initial angle in radians
    dtheta0 = 0  # initial angular velocity

    # Create an oscillator instance with damping
    damped_oscillator = Oscillator(m=m, c=c, theta0=theta0, dtheta0=dtheta0, gamma=gamma)

    # Set up the pendulum system
    damped_pendulum = Pendulum()

    # Choose an integrator, e.g., Euler-Cromer or RK4
    integrator = VerletIntegrator(_dt=0.01)

    # Set up the simulation
    sim = Simulation(damped_oscillator)

    # Run the simulation
    sim.run(damped_pendulum, integrator, tmax=30)  # Run for 30 seconds

    # Plot phase space portrait (dtheta vs theta)
    plt.figure()
    plt.plot(sim.obs.pos, sim.obs.vel, 'b-')  # dtheta vs theta
    plt.xlabel(r'$\theta$ (radians)')
    plt.ylabel(r'$\dot{\theta}$ (radians/second)')
    plt.title("Phase Space Portrait of Damped Pendulum")
    plt.grid()
    plt.show()


def critical_damping(self):
    """Check if the amplitude goes negative and return True if it doesn't."""
    for pos in self.obs.pos:
        if pos < 0:
            return False
    return True


def exercise_13(t_max=10, initial_gamma=0.1, gamma_step=0.1):
    gamma = initial_gamma
    simsystem = Harmonic()
    integrator = VerletIntegrator(_dt=0.01)

    while gamma < 10:
        # Create oscillator with current gamma
        osc = Oscillator(m=1, c=4, t0=0, theta0=1, dtheta0=0, gamma=gamma)
        simulation = Simulation(osc)
        simulation.run(simsystem, integrator, tmax=t_max)

        # Check if simulation reaches negative values
        if simulation.critical_damping():
            print(f"Smallest critical gamma where amplitude never goes negative: {gamma}")
            simulation.plot_relax(title=f"Critical Damping with Gamma={gamma}")
            return gamma
        else:
            gamma += gamma_step

    print("No suitable gamma found within the tested range.")
    return None


# Constants
omega0 = 2.0  # Natural frequency


# Define the Damped Harmonic Oscillator class
class DampedHarmonicOscillator(BaseSystem):
    def __init__(self, omega0, gamma):
        self.omega0 = omega0
        self.gamma = gamma

    def force(self, osc):
        # Returns the damping force + spring force
        return -self.omega0 ** 2 * osc.theta - self.gamma * osc.dtheta


# Update the Simulation class to handle damped oscillators
class SimulationWithDamping(Simulation):
    def plot_observables(self, title="simulation", ref_E=None):
        plt.clf()
        plt.title(title)
        plt.plot(self.obs.time, self.obs.pos, 'b-', label="Position x(t)")
        plt.plot(self.obs.time, self.obs.vel, 'r-', label="Velocity v(t)")
        plt.plot(self.obs.time, self.obs.energy, 'g-', label="Energy E(t)")
        if ref_E is not None:
            plt.axhline(ref_E, linestyle='--', color='black', label="Reference Energy")
        plt.xlabel('time')
        plt.ylabel('observables')
        plt.legend()
        plt.show()


def relaxation_time(t, x):
    # Calculate initial amplitude and the target threshold amplitude
    init_amplitude = abs(x[0])
    target_amplitude = init_amplitude / np.e

    # To store times when the amplitude reaches the threshold
    times_at_threshold = []

    # Loop through the position data to find crossings
    for i in range(1, len(x)):
        # Check if the amplitude crosses the target amplitude from either side
        if (abs(x[i - 1]) > target_amplitude >= abs(x[i])) or (abs(x[i - 1]) < target_amplitude <= abs(x[i])):
            # Linear interpolation to find the exact time of crossing
            t_cross = t[i - 1] + (t[i] - t[i - 1]) * \
                      (target_amplitude - abs(x[i - 1])) / (abs(x[i]) - abs(x[i - 1]))
            times_at_threshold.append(t_cross)
            print(times_at_threshold)
    # Output results
    print("Times at which amplitude crosses the 1/e threshold:", times_at_threshold)

    # Return the last crossing time if available
    if times_at_threshold:
        return times_at_threshold[-1]
    else:
        print("Amplitude never reaches 1/e of the initial amplitude.")
        return None

# Run simulation and plot for a given damping coefficient gamma
def run_damped_oscillator_simulation(gamma):
    # Set up oscillator with initial conditions and damping
    oscillator = Oscillator(m=1, c=omega0 ** 2, theta0=1.0, dtheta0=0, gamma=gamma)
    system = DampedHarmonicOscillator(omega0=omega0, gamma=gamma)
    integrator = VerletIntegrator(_dt=0.01)  # You can switch to Verlet or RK4

    # Initialize and run simulation
    simulation = SimulationWithDamping(oscillator)
    simulation.run(system, integrator, tmax=20)  # Run for 20 seconds

    # Plot the observables
    title = f"Damped Harmonic Oscillator with γ = {gamma}"
    simulation.plot_observables(title=title)

    # Calculate and print relaxation time
    tau = relaxation_time(simulation.obs.time, simulation.obs.pos)
    if tau:
        print(f"Relaxation time τ for γ = {gamma}: {tau:.2f} s")
    else:
        print(f"No relaxation time found for γ = {gamma}")


# Function to find critical damping (gamma_c)
def find_critical_damping():
    gamma_values = np.linspace(0.1, 5.0, 50)  # Range of gamma values to test
    for gamma in gamma_values:
        oscillator = Oscillator(m=1, c=omega0 ** 2, theta0=1.0, dtheta0=0, gamma=gamma)
        system = DampedHarmonicOscillator(omega0=omega0, gamma=gamma)
        integrator = VerletIntegrator(_dt=0.01)

        # Run the simulation briefly to check for oscillation
        simulation = SimulationWithDamping(oscillator)
        simulation.run(system, integrator, tmax=10)

        # Check if the oscillator crosses x=0 by looking for sign changes
        pos_array = np.array(simulation.obs.pos)
        sign_changes = np.where(np.diff(np.sign(pos_array)))[0]

        # If there are no sign changes, it indicates critical or overdamping
        if len(sign_changes) == 0:
            print(f"Critical damping γ_c estimated as: {gamma:.2f}")
            return gamma  # Found the smallest gamma with no oscillation

    print("Critical damping γ_c not found in the range tested.")


# Run simulations for γ = 0.5 and γ = 3.0, then find critical damping
run_damped_oscillator_simulation(0.5)
run_damped_oscillator_simulation(3.0)
find_critical_damping()


#exercise_11()
#exercise_12()
#exercise_13()
#exercise_14()
