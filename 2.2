#!/bin/python3
# Template for traffic simulation
# BH, MP 2021-11-15, latest version 2024-11-08.
"""
This template is used as backbone for the traffic simulations.
Its structure resembles the one of the pendulum project, that is you have:
(a) a class containing the state of the system and it's parameters
(b) a class storing the observables that you want then to plot
(c) a class that propagates the state in time (which in this case is discrete),
and
(d) a class that encapsulates the aforementioned ones and performs the actual
simulation
You are asked to implement the propagation rule(s) corresponding to the traffic
model(s) of the project.
"""
import math
import matplotlib.pyplot as plt
from matplotlib import animation
import numpy.random as rng
import numpy as np
import matplotlib
import matplotlib.animation as animation


class Cars:
    """ Class for the state of a number of cars """

    def __init__(self, numCars=5, roadLength=50, v0=1):
        self.numCars = numCars
        self.roadLength = roadLength
        self.t = 0
        self.x = []
        self.v = []
        self.c = []
        for i in range(numCars):
            # TODO: Set the initial position for each car.
            # Note that the ordering of the cars on the road needs to match
            # the order in which you compute the distances between cars
            self.x.append(i)  # the position of the cars on the road
            self.v.append(v0)  # the speed of the cars
            self.c.append(i)  # the color of the cars (for drawing)
            # NOTE: you can, but don't have to use this function for computing distances

    def distance(self, i):
        # Find the position of the car in front
        front = (i + 1) % self.numCars
        # Compute the periodic distance
        return (self.x[front] - self.x[i]) % self.roadLength


class Observables:
    """ Class for storing observables """

    def __init__(self):
        self.time = []  # list to store time
        self.flowrate = []  # list to store the flow rate


class BasePropagator:
    def __init__(self):
        return

    def propagate(self, cars, obs):
        """ Perform a single integration step """
        fr = self.timestep(cars, obs)
        # Append observables to their lists
        obs.time.append(cars.t)
        obs.flowrate.append(fr)

    def timestep(self, cars, obs):
        # Step 1: Acceleration
        for i in range(cars.numCars):
            if cars.v[i] < self.vmax:
                cars.v[i] += 1

        # Step 2: Avoid collisions
        for i in range(cars.numCars):
            gap = cars.distance(i)
            if cars.v[i] > gap:
                cars.v[i] = gap

        # Step 3: Random deceleration
        for i in range(cars.numCars):
            if rng.random() < self.p and cars.v[i] > 0:
                cars.v[i] -= 1

        # Step 4: Move cars
        for i in range(cars.numCars):
            cars.x[i] = (cars.x[i] + cars.v[i]) % cars.roadLength

        # Step 5: Compute flow rate (cars crossing a specific point, e.g., x=0)
        flow_rate = sum(1 for i in range(cars.numCars) if (cars.x[i] - cars.v[i]) % cars.roadLength == 0)

        # Increment time
        cars.t += 1
        return flow_rate


class ConstantPropagator(BasePropagator):
    """
    Cars do not interact: each position is just
    updated using the corresponding velocity
    """

    def timestep(self, cars, obs):
        for i in range(cars.numCars):
            cars.x[i] += cars.v[i]
        cars.t += 1
        return 0
        # TODO
        # HERE YOU SHOULD IMPLEMENT THE DIFFERENT CAR BEHAVIOR RULES
        # Define you own class which inherits from BasePropagator (e.g. MyPropagator(BasePropagator))
        # and implement timestep according to the rule described in the project


class MyPropagator(BasePropagator):
    def __init__(self, vmax, p):
        super().__init__()
        self.vmax = vmax
        self.p = p

    def timestep(self, cars, obs):
        # Step 1: Acceleration
        for i in range(cars.numCars):
            if cars.v[i] < self.vmax:
                cars.v[i] += 1

        # Step 2: Prevent collisions
        for i in range(cars.numCars):
            gap = cars.distance(i)  # Compute distance to the next car
            if cars.v[i] >= gap:
                cars.v[i] = gap - 1

        # Step 3: Random deceleration
        for i in range(cars.numCars):
            if rng.random() < self.p and cars.v[i] > 0:
                cars.v[i] -= 1

        # Step 4: Update positions
        for i in range(cars.numCars):
            cars.x[i] = (cars.x[i] + cars.v[i]) % cars.roadLength

        # Calculate the flow rate
        flow_rate = sum(cars.v) / cars.roadLength
        # Increment time
        cars.t += 1
        return flow_rate

    def timestep_compute_st_dev(self, cars, obs):
        # Step 1: Acceleration
        for i in range(cars.numCars):
            if cars.v[i] < self.vmax:
                cars.v[i] += 1

        # Step 2: Prevent collisions
        for i in range(cars.numCars):
            gap = cars.distance(i)  # Compute distance to the next car
            if cars.v[i] >= gap:
                cars.v[i] = gap - 1

        # Step 3: Random deceleration
        for i in range(cars.numCars):
            if rng.random() < self.p and cars.v[i] > 0:
                cars.v[i] -= 1

        # Step 4: Update positions
        for i in range(cars.numCars):
            cars.x[i] = (cars.x[i] + cars.v[i]) % cars.roadLength

        # Calculate the flow rate
        flow_rate = sum(cars.v) / cars.roadLength
        obs.flowrate.append(flow_rate)
        # Increment time
        cars.t += 1
        return flow_rate

    def draw_cars(cars, ax):
        """ Draw cars on a circular road """
        ax.clear()  # Clear the previous frame
        ax.set_theta_offset(0.5 * np.pi)  # Start at the top
        ax.set_theta_direction(-1)  # Clockwise direction

        # Convert car positions to polar coordinates
        theta = [(2 * np.pi * x) / cars.roadLength for x in cars.x]  # Angular position
        r = [1] * cars.numCars  # Fixed radial position for all cars

        # Generate a colormap for the cars
        colors = plt.cm.hsv(np.linspace(0, 1, cars.numCars))  # Use HSV colormap

        ax.scatter(theta, r, c=colors, s=50, label="Cars")  # Plot cars as dots
        ax.set_yticks([])  # Hide radial axis
        ax.set_xticks([])  # Hide angular axis
        ax.legend(loc="upper right")
        ax.set_title("Cars on a Circular Road")

    def animate(framenr, cars, obs, propagator, road_drawing, stepsperframe):
        """ Animation function which integrates a few steps and return a drawing """
        for it in range(stepsperframe):
            propagator.propagate(cars, obs)
        return draw_cars(cars, road_drawing),


class Simulation:
    def reset(self, cars=Cars()):
        self.cars = cars
        self.obs = Observables()

    def __init__(self, cars=Cars()):
        self.reset(cars)

    def plot_observables(self, title="simulation"):
        plt.clf()
        plt.title(title)
        plt.plot(self.obs.time, self.obs.flowrate)
        plt.xlabel('time')
        plt.ylabel('flow rate')
        plt.savefig(title + ".pdf")
        plt.show()
        # Run without displaying any animation (fast)

    def run(self, propagator, numsteps=200, title="simulation"):
        for it in range(numsteps):
            propagator.propagate(self.cars, self.obs)
        self.plot_observables(title)
        # Run while displaying the animation of bunch of cars going in circe (slow-ish)

    def run_once(self, propagator, numsteps=200, title="simulation"):
        for it in range(numsteps):
            propagator.propagate(self.cars, self.obs)

    def run_animate(self, propagator, numsteps=200, stepsperframe=1, title="simulation"):
        numframes = int(numsteps / stepsperframe)
        fig = plt.figure()
        ax = fig.add_subplot(111, projection='polar')
        ax.axis('off')
        # Call the animator, blit=False means re-draw everything
        anim = animation.FuncAnimation(plt.gcf(), animate,  # init_func=init,
                                       fargs=[self.cars, self.obs, propagator, ax, stepsperframe],
                                       frames=numframes, interval=50, blit=True,
                                       repeat=False)
        plt.show()
        # If you experience problems visualizing the animation and/or
        # the following figures comment out the next line
        # plt.waitforbuttonpress(30)
        self.plot_observables(title)
        # It's good practice to encapsulate the script execution in
        # a main() function (e.g. for profiling reasons)


def fundamental_diagram():
    """Runs 10 simulations with the same road length and different densities, plots the Fundamental Diagram"""
    roadLength = 100
    densities = np.linspace(0.1, 1.0, 10)  # Densities from 0.1 to 1.0
    flow_rates = []

    for density in densities:
        numCars = int(density * roadLength)
        cars = Cars(numCars=numCars, roadLength=roadLength)
        simulation = Simulation(cars)
        propagator = MyPropagator(vmax=2, p=0.5)
        simulation.run(propagator, numsteps=500)  # Allow system to equilibrate
        avg_flow_rate = np.mean(simulation.obs.flowrate[-100:])  # Average flow rate
        flow_rates.append(avg_flow_rate)

    # Plot the fundamental diagram
    plt.plot(densities, flow_rates, marker='o')
    plt.xlabel('Density')
    plt.ylabel('Flow Rate')
    plt.title('Fundamental Diagram')
    plt.grid()
    plt.show()


# Main simulation function to generate road vs. time plot
def road_vs_time_plot(vmax, p, numCars, roadLength, numsteps):
    """Plots a number of cars and shows there position over time"""
    cars = Cars(numCars=numCars, roadLength=roadLength)
    propagator = MyPropagator(vmax, p)
    obs = Observables()
    # Store positions of cars over time
    car_positions = []

    for _ in range(numsteps):
        car_positions.append(list(cars.x))  # Record positions of all cars at this time step
        propagator.timestep(cars, obs)

    # Prepare data for plotting
    car_positions = np.array(car_positions)  # Convert to a numpy array for easier indexing
    time_steps = np.arange(numsteps)  # Time steps

    # Plot road vs. time
    plt.figure(figsize=(10, 6))
    for car in range(numCars):
        plt.scatter(car_positions[:, car], time_steps, s=2, label=f"Car {car + 1}" if car == 0 else "")  # Smaller dots

    plt.title("Road vs. Time")
    plt.xlabel("Road (Position)")
    plt.ylabel("Time")
    plt.xlim(0, roadLength)
    plt.ylim(0, numsteps)
    plt.grid(True)
    plt.legend(["Cars"], loc="upper right", markerscale=3, fontsize=8)
    plt.show()


def animate_cars_circular(vmax, p, numCars, roadLength, numsteps, interval):
    """Visual animation of cars going around a circular road"""
    cars = Cars(numCars=numCars, roadLength=roadLength)
    propagator = MyPropagator(vmax, p)

    # Set up the figure and axis
    fig, ax = plt.subplots(figsize=(6, 6), subplot_kw={'projection': 'polar'})

    def update(frame):
        """ Update function for animation """
        propagator.timestep(cars, Observables())  # Update cars' positions
        MyPropagator.draw_cars(cars, ax)  # Draw cars on the circular road

    ani = animation.FuncAnimation(
        fig, update, frames=numsteps, interval=interval, repeat=False
    )
    plt.show()


def run_simulation_once(roadLength=50, numCars=25, vmax=2, p=0.5, equilibration_steps=500, measurement_steps=100):
    """Run a single simulation and return the average flow rate over the measurement steps."""
    cars = Cars(numCars=numCars, roadLength=roadLength)
    propagator = MyPropagator(vmax, p)
    obs = Observables()

    # Equilibrate the system
    for _ in range(equilibration_steps):
        propagator.timestep_compute_st_dev(cars, obs)

    # Measure flow rate over the next 100 steps
    flow_rates = []
    for _ in range(measurement_steps):
        propagator.timestep_compute_st_dev(cars, obs)
        flow_rates.append(obs.flowrate)

    # Return the average flow rate during the measurement steps
    return np.mean(flow_rates)


def compute_standard_error(target_se=0.001, max_simulations=10000):
    """Run multiple simulations to compute the standard error and required number of simulations."""
    flow_rates = []
    for i in range(max_simulations):
        flow_rate = run_simulation_once()
        flow_rates.append(flow_rate)

        # Compute the standard error after each simulation

        mean_flow_rate = np.mean(flow_rates)
        variance = np.var(flow_rates, ddof=1)
        se = np.sqrt(variance) / np.sqrt(len(flow_rates) - 1)
        # Print progress
        print(f"Simulation {i + 1}: Mean Flow Rate = {mean_flow_rate:.5f}, SE = {se:.5f}")

        # Stop if the standard error meets the target
        if se <= target_se:
            print(f"Target standard error of {target_se} reached after {i + 1} simulations.")
            return mean_flow_rate, se, i + 1

    # If the target SE is not reached within the max simulations
    print(f"Target standard error not reached after {max_simulations} simulations.")
    return np.mean(flow_rates), se, max_simulations


def test_equilibration(roadLength=50, numCars=25, vmax=2, p=0.5, total_steps=1000):
    """Skiten funkar inte riktigt"""
    cars = Cars(numCars=numCars, roadLength=roadLength)
    propagator = MyPropagator(vmax, p)
    obs = Observables()

    # Run the simulation for total_steps
    for _ in range(total_steps):
        propagator.timestep_compute_st_dev(cars, obs)

    # Plot flow rate over time
    plt.plot(obs.time, obs.flowrate, label="Flow Rate")
    plt.axvline(x=500, color="red", linestyle="--", label="Equilibration Point (500)")
    plt.xlabel("Time Steps")
    plt.ylabel("Flow Rate")
    plt.title("Flow Rate vs. Time")
    plt.legend()
    plt.grid()
    plt.show()


def analyze_system_size():
    roadLengths = np.linspace(10, 200, 20)  # Road lengths from 10 to 200
    density = 0.5  # Fixed density
    flow_rates = []
    equilibration_steps = []  # Store equilibration times for each road length

    for l in roadLengths:
        numCars = int(density * l)  # Calculate number of cars
        cars = Cars(numCars=numCars, roadLength=int(l))  # Create cars for this road length
        simulation = Simulation(cars)
        propagator = MyPropagator(vmax=2, p=0.5)

        # Adjust equilibration time based on road length (longer for larger systems)
        equilibration_time = int(l * 5)  # Example: 5 steps per unit road length
        equilibration_steps.append(equilibration_time)

        # Run the simulation
        simulation.run(propagator, numsteps=equilibration_time + 100)  # Include measurement steps
        avg_flow_rate = np.mean(simulation.obs.flowrate[-100:])  # Average over last 100 steps
        flow_rates.append(avg_flow_rate)

    # Plot flow rate vs. road length
    plt.figure(figsize=(10, 6))
    plt.plot(roadLengths, flow_rates, marker='o')
    plt.xlabel("Road Length")
    plt.ylabel("Flow Rate")
    plt.title("Flow Rate vs Road Length at Fixed Density")
    plt.grid()
    plt.show()

    # Analyze convergence
    print("Equilibration Steps for Each Road Length:")
    for r, eq_time, flow in zip(roadLengths, equilibration_steps, flow_rates):
        print(f"Road Length: {r}, Equilibration Steps: {eq_time}, Flow Rate: {flow:.4f}")


def plot_flow_vs_roadlength(density=0.5, roadLengths=np.linspace(10, 200, 20), vmax=2, p=0.5, equilibration_factor=5,
                            measurement_steps=100):
    """
    Plot Flow Rate vs Road Length for a fixed density.

    Parameters:
    - density: Fixed density (number of cars / road length).
    - roadLengths: Array of road lengths to analyze.
    - vmax: Maximum car velocity.
    - p: Probability of random deceleration.
    - equilibration_factor: Multiplier for equilibration steps (e.g., roadLength * factor).
    - measurement_steps: Number of steps to measure flow rate.
    """
    flow_rates = []  # Store flow rates for each road length

    for roadLength in roadLengths:
        numCars = int(density * roadLength)  # Calculate number of cars based on fixed density
        cars = Cars(numCars=numCars, roadLength=int(roadLength))
        simulation = Simulation(cars)
        propagator = MyPropagator(vmax, p)

        # Adjust equilibration time based on road length
        equilibration_steps = int(roadLength * equilibration_factor)

        # Run the simulation
        simulation.run(propagator, numsteps=equilibration_steps + measurement_steps)

        # Measure flow rate
        avg_flow_rate = np.mean(simulation.obs.flowrate[-measurement_steps:])  # Average flow rate over last steps
        flow_rates.append(avg_flow_rate)

    # Plot flow rate vs. road length
    plt.figure(figsize=(10, 6))
    plt.plot(roadLengths, flow_rates, marker='o')
    plt.xlabel("Road Length")
    plt.ylabel("Flow Rate (Cars per Unit Time)")
    plt.title(f"Flow Rate vs Road Length (Density = {density})")
    plt.grid()
    plt.show()


def assignment_2a():
    vmax = 2
    p = 0.5
    numCars = 20
    roadLength = 100
    numsteps = 200
    interval = 100

    fundamental_diagram()
    #road_vs_time_plot(vmax, p, numCars, roadLength, numsteps)
    #animate_cars_circular(vmax, p, numCars, roadLength, numsteps, interval)


def assignment_2b():
    """Runs the same simulations as in assignment a and gathers enough data so that the SE < 0.001"""
    mean_flow_rate, final_se, num_simulations = compute_standard_error(target_se=0.001)
    print(
        f"Final Results: Mean Flow Rate = {mean_flow_rate:.5f}, Final SE = {final_se:.5f}, Simulations = {num_simulations}")


def assignmetn_2c():
    """Plots the same as in 2a but the roadlength is alltered and the density is constant."""
    plot_flow_vs_roadlength()
    #analyze_system_size()
    #test_equilibration()  # Does not quite work yet...


#assignment_2a()
#assignment_2b()
assignmetn_2c()


"""
-Kommentera bort det som plottar alla simulation i både main och analyze system
-Vi vill öka roadlength och minska stepsize för att se mer data 
-Svara på fråga 2.b Lite nogrannare, inte helt klar med den.
-Leka runt med road och cirkel plottarna för att kunna svara på d och e. 

"""
